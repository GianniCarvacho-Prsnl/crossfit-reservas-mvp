name: Star/Stop Machines (crossfit-reservas-mvp · 17:00–20:00 CL)

on:
  schedule:
    # START exacto a las 17:00 CL
    - cron: "0 21 * * *"   # Invierno CL (UTC-4): 17:00 = 21:00 UTC
    - cron: "0 20 * * *"   # Verano  CL (UTC-3): 17:00 = 20:00 UTC
    # STOP exacto a las 20:00 CL
    - cron: "0 0 * * *"    # Invierno CL: 20:00 = 00:00 UTC (día siguiente)
    - cron: "0 23 * * *"   # Verano  CL: 20:00 = 23:00 UTC
  workflow_dispatch: {}

jobs:
  control:
    runs-on: ubuntu-latest
    env:
      APP: crossfit-reservas-mvp
      FLY_API_HOSTNAME: https://api.machines.dev
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      TARGET_ID: d891dd0ae45618
    steps:
      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Determinar modo (START/STOP)
        id: mode
        run: |
          MODE=""
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Ejecución manual: decide por hora local de Chile
            export TZ=America/Santiago
            H=$(date +%H%M)
            echo "Hora local CL: $H"
            if [ "$H" -ge "1700" ] && [ "$H" -lt "2000" ]; then MODE="start"; else MODE="stop"; fi
          else
            # Ejecución por cron: decide por la regla programada
            case "${{ github.event.schedule }}" in
              "0 21 * * *"|"0 20 * * *") MODE="start" ;;   # 17:00 CL (invierno/verano)
              "0 0 * * *"|"0 23 * * *") MODE="stop"  ;;   # 20:00 CL (invierno/verano)
              *) MODE="start" ;;  # fallback seguro
            esac
          fi
          echo "mode=$MODE" >> $GITHUB_OUTPUT
          echo "Modo decidido: $MODE"

      - name: Listar machines
        run: |
          curl -fsSL -H "Authorization: Bearer $FLY_API_TOKEN" \
            "$FLY_API_HOSTNAME/v1/apps/$APP/machines" -o machines.json
          jq -r '.[].id' machines.json

      - name: START (según modo)
        if: steps.mode.outputs.mode == 'start'
        run: |
          echo "▶️ START $TARGET_ID"
          curl -fsS -X POST -H "Authorization: Bearer $FLY_API_TOKEN" \
            "$FLY_API_HOSTNAME/v1/apps/$APP/machines/$TARGET_ID/start"
          curl -fsS "https://$APP.fly.dev/health" || true

      - name: STOP (según modo)
        if: steps.mode.outputs.mode == 'stop'
        run: |
          echo "⏹ STOP $TARGET_ID"
          curl -fsS -X POST -H "Authorization: Bearer $FLY_API_TOKEN" \
            "$FLY_API_HOSTNAME/v1/apps/$APP/machines/$TARGET_ID/stop"