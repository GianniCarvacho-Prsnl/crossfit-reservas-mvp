"""
Direct Timing Controller - Control de temporizaci√≥n simplificado sin ciclos

Este m√≥dulo implementa el control de tiempo SIMPLIFICADO para reservas programadas.
Utiliza c√°lculo directo sin ciclos complejos, maximizando la precisi√≥n temporal.

Caracter√≠sticas principales:
- C√°lculo directo de tiempos de preparaci√≥n y ejecuci√≥n
- asyncio.sleep() para m√°xima precisi√≥n
- Manejo de zona horaria Chile/Santiago
- Validaciones de seguridad temporal
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
import pytz
import logging

logger = logging.getLogger(__name__)


class DirectTimingController:
    """
    Control de tiempo SIMPLIFICADO - Sin ciclos, solo c√°lculo directo
    
    Este controlador maneja toda la l√≥gica de temporizaci√≥n para reservas programadas:
    - Calcula momentos cr√≠ticos (preparaci√≥n y ejecuci√≥n)
    - Ejecuta esperas precisas con asyncio
    - Valida fechas y horas futuras
    - Maneja zona horaria de Chile
    """
    
    def __init__(self):
        """Inicializa el controlador con configuraci√≥n de Chile/Santiago"""
        self.timezone = pytz.timezone("America/Santiago")
        logger.info("üïê DirectTimingController inicializado con timezone: America/Santiago")
    
    def calculate_execution_times(
        self, 
        fecha_reserva_str: str, 
        hora_reserva_str: str
    ) -> Dict[str, Any]:
        """
        Calcula los dos momentos cr√≠ticos de ejecuci√≥n: preparaci√≥n y ejecuci√≥n final
        
        Args:
            fecha_reserva_str: Fecha en formato "YYYY-MM-DD" (ej: "2025-01-19")
            hora_reserva_str: Hora en formato "HH:MM:SS" (ej: "17:00:00")
            
        Returns:
            Dict con informaci√≥n de timing:
            {
                "preparation_datetime": datetime,    # Momento de preparaci√≥n (T-1min)
                "execution_datetime": datetime,      # Momento de ejecuci√≥n (T+1ms)
                "wait_until_prep_seconds": float,    # Segundos hasta preparaci√≥n
                "wait_until_exec_seconds": float,    # Segundos hasta ejecuci√≥n
                "is_valid": bool,                    # Si es ejecutable
                "target_time": datetime,             # Tiempo objetivo
                "validation_message": str            # Mensaje de validaci√≥n
            }
        """
        logger.info(f"üßÆ Calculando tiempos de ejecuci√≥n: {fecha_reserva_str} {hora_reserva_str}")
        
        try:
            # SOLUCI√ìN SIMPLE: Usar datetime naive (sin timezone) para evitar problemas
            now = datetime.now()
            
            # Crear datetime objetivo usando fecha y hora espec√≠ficas
            target_date = datetime.strptime(fecha_reserva_str, "%Y-%m-%d").date()
            target_time = datetime.strptime(hora_reserva_str, "%H:%M:%S").time()
            target_datetime = datetime.combine(target_date, target_time)
            
            # Calcular momentos cr√≠ticos
            # Preparaci√≥n: 1 minuto antes del objetivo
            prep_datetime = target_datetime - timedelta(minutes=1)
            # Ejecuci√≥n: 1 milisegundo despu√©s del objetivo (para no ejecutar antes)
            exec_datetime = target_datetime + timedelta(milliseconds=1)
            
            # Calcular segundos de espera
            wait_until_prep = (prep_datetime - now).total_seconds()
            wait_until_exec = (exec_datetime - now).total_seconds()
            
            # Log para debugging
            logger.info(f"‚è∞ Hora actual: {now}")
            logger.info(f"üéØ Hora objetivo: {target_datetime}")
            logger.info(f"üîß Preparaci√≥n en: {prep_datetime}")
            logger.info(f"‚ö° Ejecuci√≥n en: {exec_datetime}")
            logger.info(f"‚è≥ Segundos hasta preparaci√≥n: {wait_until_prep:.1f}")
            logger.info(f"‚è∞ Segundos hasta ejecuci√≥n: {wait_until_exec:.1f}")
            
            # Validaciones de seguridad
            is_valid = True
            validation_message = "Timing v√°lido"
            
            if wait_until_prep <= 0:
                is_valid = False
                validation_message = f"La hora de preparaci√≥n ya pas√≥. Objetivo: {prep_datetime}, Actual: {now}"
            elif wait_until_exec <= 0:
                is_valid = False
                validation_message = f"La hora de ejecuci√≥n ya pas√≥. Objetivo: {target_datetime}, Actual: {now}"
            elif wait_until_prep > 24 * 3600:  # M√°s de 24 horas
                is_valid = False
                validation_message = f"Tiempo de espera muy largo: {wait_until_prep/3600:.1f} horas"
            
            result = {
                "preparation_datetime": prep_datetime,
                "execution_datetime": exec_datetime,
                "wait_until_prep_seconds": wait_until_prep,
                "wait_until_exec_seconds": wait_until_exec,
                "is_valid": is_valid,
                "current_time": now,
                "target_time": target_datetime,
                "validation_message": validation_message
            }
            
            logger.info(f"‚úÖ C√°lculo completado. V√°lido: {is_valid}, Preparaci√≥n en: {wait_until_prep:.1f}s, Ejecuci√≥n en: {wait_until_exec:.1f}s")
            return result
            
        except ValueError as e:
            logger.error(f"‚ùå Error en formato de fecha/hora: {str(e)}")
            return {
                "preparation_datetime": None,
                "execution_datetime": None,
                "wait_until_prep_seconds": -1,
                "wait_until_exec_seconds": -1,
                "is_valid": False,
                "current_time": datetime.now(self.timezone),
                "target_time": None,
                "validation_message": f"Error en formato de fecha/hora: {str(e)}"
            }
        except Exception as e:
            logger.error(f"üí• Error inesperado en c√°lculo de tiempos: {str(e)}")
            return {
                "preparation_datetime": None,
                "execution_datetime": None,
                "wait_until_prep_seconds": -1,
                "wait_until_exec_seconds": -1,
                "is_valid": False,
                "current_time": datetime.now(self.timezone),
                "target_time": None,
                "validation_message": f"Error inesperado: {str(e)}"
            }
    
    async def sleep_until(self, target_datetime: datetime):
        """
        Duerme hasta un momento exacto usando asyncio
        M√ÅXIMA PRECISI√ìN - Sin ciclos ni verificaciones
        
        Args:
            target_datetime: Momento exacto hasta el cual dormir
        """
        # Usar datetime naive para evitar problemas de timezone
        now = datetime.now()
        sleep_seconds = (target_datetime - now).total_seconds()
        
        logger.info(f"üò¥ Durmiendo {sleep_seconds:.1f} segundos hasta {target_datetime}")
        
        if sleep_seconds > 0:
            await asyncio.sleep(sleep_seconds)
        else:
            logger.warning(f"‚ö†Ô∏è Tiempo objetivo ya pas√≥: {target_datetime} vs actual: {now}")
    
    def validate_fecha_hora(
        self, 
        fecha_reserva: str, 
        hora_reserva: str
    ) -> Dict:
        """
        Valida formato y l√≥gica de fecha y hora
        
        Args:
            fecha_reserva: Fecha en formato "YYYY-MM-DD"
            hora_reserva: Hora en formato "HH:MM:SS"
            
        Returns:
            Dict con resultado de validaci√≥n:
            {
                "is_valid": bool,
                "errors": List[str],
                "parsed_datetime": Optional[datetime],
                "message": str
            }
        """
        errors = []
        parsed_datetime = None
        
        try:
            # Validar formato de fecha
            try:
                fecha_obj = datetime.strptime(fecha_reserva, "%Y-%m-%d").date()
            except ValueError:
                errors.append(f"Formato de fecha inv√°lido: {fecha_reserva}. Use YYYY-MM-DD")
                fecha_obj = None
            
            # Validar formato de hora
            try:
                hora_obj = datetime.strptime(hora_reserva, "%H:%M:%S").time()
            except ValueError:
                errors.append(f"Formato de hora inv√°lido: {hora_reserva}. Use HH:MM:SS")
                hora_obj = None
            
            # Si ambos formatos son v√°lidos, crear datetime y validar l√≥gica
            if fecha_obj and hora_obj:
                parsed_datetime = datetime.combine(fecha_obj, hora_obj).replace(tzinfo=self.timezone)
                now = datetime.now(self.timezone)
                
                # Validar que sea fecha futura
                if parsed_datetime <= now:
                    errors.append(f"La fecha/hora debe ser futura. Especificada: {parsed_datetime}, Actual: {now}")
                
                # Validar que no sea muy lejana (m√°s de 7 d√≠as)
                max_future = now + timedelta(days=7)
                if parsed_datetime > max_future:
                    errors.append(f"La fecha/hora no puede ser m√°s de 7 d√≠as en el futuro. M√°ximo: {max_future}")
            
            is_valid = len(errors) == 0
            message = "Fecha y hora v√°lidas" if is_valid else f"Errores encontrados: {'; '.join(errors)}"
            
            logger.info(f"üìã Validaci√≥n de fecha/hora: {is_valid} - {message}")
            
            return {
                "is_valid": is_valid,
                "errors": errors,
                "parsed_datetime": parsed_datetime,
                "message": message
            }
            
        except Exception as e:
            error_msg = f"Error inesperado durante validaci√≥n: {str(e)}"
            logger.error(f"üí• {error_msg}")
            return {
                "is_valid": False,
                "errors": [error_msg],
                "parsed_datetime": None,
                "message": error_msg
            }
    
    def get_timing_info(
        self, 
        fecha_reserva: str, 
        hora_reserva: str
    ) -> Dict:
        """
        Funci√≥n de conveniencia que combina validaci√≥n y c√°lculo de tiempos
        
        Args:
            fecha_reserva: Fecha en formato "YYYY-MM-DD"
            hora_reserva: Hora en formato "HH:MM:SS"
            
        Returns:
            Dict completo con validaci√≥n y c√°lculos de tiempo
        """
        logger.info(f"üìä Obteniendo informaci√≥n completa de timing: {fecha_reserva} {hora_reserva}")
        
        # Primero validar formatos
        validation = self.validate_fecha_hora(fecha_reserva, hora_reserva)
        
        if not validation["is_valid"]:
            return {
                "validation": validation,
                "timing": None,
                "overall_valid": False,
                "message": f"Validaci√≥n fallida: {validation['message']}"
            }
        
        # Si la validaci√≥n es exitosa, calcular tiempos
        timing = self.calculate_execution_times(fecha_reserva, hora_reserva)
        
        overall_valid = validation["is_valid"] and timing["is_valid"]
        
        return {
            "validation": validation,
            "timing": timing,
            "overall_valid": overall_valid,
            "message": "Informaci√≥n de timing completa" if overall_valid else f"Error: {timing['validation_message']}"
        }
